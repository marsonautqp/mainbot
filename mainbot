import logging
from logging.handlers import TimedRotatingFileHandler
from pyrogram import Client, filters
from pyrogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from spam_client import SpamClient
import asyncio
from telethon import TelegramClient
from telethon.errors import FloodWaitError
import time
from collections import deque
from typing import Deque
from datetime import datetime
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ª–æ–≥–æ–≤ (–Ω–æ–≤–æ–µ)
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ —Ö—Ä–∞–Ω–∏—Ç 7 –∫–æ–ø–∏–π
log_handler = TimedRotatingFileHandler("bot.log", when="D", interval=1, backupCount=7)
log_handler.setFormatter(log_formatter)
log_handler.setLevel(logging.INFO)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(log_handler)

# –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –≤—ã–≤–æ–¥ –∏ –≤ –∫–æ–Ω—Å–æ–ª—å, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω StreamHandler
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)
console_handler.setLevel(logging.INFO)
logger.addHandler(console_handler)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è get_dialogs)
db_lock = asyncio.Lock()  # –ù–æ–≤–æ–µ: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

# –§—É–Ω–∫—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤ –∫ –±–∞–∑–µ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
@lru_cache(maxsize=1)
async def get_cached_chats(spam):
    async with db_lock:  # –ù–æ–≤–æ–µ: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ
        return await spam.get_dialogs()

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def refresh_cache():
    while True:
        async with SpamClient(SPAM_SESSION, SPAM_API_ID, SPAM_API_HASH) as spam:
            get_cached_chats.cache_clear()  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
            await get_cached_chats(spam)      # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        await asyncio.sleep(300)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = '27734380'
API_HASH = '3597d2e2c267893d2652185f39d6f0af'
BOT_TOKEN = '7859990877:AAFDnFwvmVT5D-cAl_wkeq1hvlb3tVZ6GKs'

SPAM_API_ID = 29720193
SPAM_API_HASH = '75c623435b41e476192f723eafd53645'
SPAM_SESSION = 'spam_account12'

client = TelegramClient(SPAM_SESSION, SPAM_API_ID, SPAM_API_HASH, system_version='4.16.30-vxCUSTOM')

class RateLimiter:
    def __init__(self, rate_limit: int, period: float):
        self.rate_limit = rate_limit
        self.period = period
        self.timestamps: Deque[float] = deque()
        self.lock = asyncio.Lock()

    async def acquire(self):
        async with self.lock:
            now = time.monotonic()
            while self.timestamps and now - self.timestamps[0] > self.period:
                self.timestamps.popleft()
            if len(self.timestamps) >= self.rate_limit:
                sleep_time = self.period - (now - self.timestamps[0])
                await asyncio.sleep(sleep_time)
                now = time.monotonic()
                self.timestamps.popleft()
            self.timestamps.append(now)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
rate_limiter = RateLimiter(rate_limit=10, period=60)
spam_task = None
is_spamming: bool = False  # –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
sent_messages_count: int = 0

app = Client("admin_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

message_timestamps = []
rate_limit_lock = asyncio.Lock()

LOG_CHANNEL_ID = -1002547352191

def get_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ –≤ –±–∞–∑–µ", callback_data="chats_count")],
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_spam")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])

async def error_handler(func, _client, message):
    try:
        await func(_client, message)
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("start"))
async def start(_client: Client, message: Message):
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

@app.on_callback_query()
async def handle_callback(_client: Client, callback_query: CallbackQuery):
    global is_spamming, spam_task, sent_messages_count

    data = callback_query.data
    await callback_query.answer()

    if data == "chats_count":
        # –ù–æ–≤–æ–µ: –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await callback_query.message.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        try:
            async with SpamClient(SPAM_SESSION, SPAM_API_ID, SPAM_API_HASH) as spam:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π)
                dialogs = await get_cached_chats(spam)
                chats = [d for d in dialogs if d.is_group]
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                await loading_msg.edit_text(
                    f"–í –±–∞–∑–µ {len(chats)} —á–∞—Ç–æ–≤",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
                    ])
                )
        except Exception as e:
            await handle_error(e, callback_query.message)

    elif data == "start_spam":
        try:
            async with SpamClient(SPAM_SESSION, SPAM_API_ID, SPAM_API_HASH) as spam:
                saved_messages = await spam.get_messages("me", limit=1)
                preview_text = "üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
                if not saved_messages:
                    preview_text += "‚ö†Ô∏è –í –ò–∑–±—Ä–∞–Ω–Ω–æ–º –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!"
                else:
                    msg = saved_messages[0]
                    media_info = ""
                    if msg.media:
                        if msg.photo:
                            media_info = "üì∑ –§–æ—Ç–æ"
                        elif msg.video:
                            media_info = "üé• –í–∏–¥–µ–æ"
                        elif msg.document:
                            media_info = "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
                        elif msg.audio:
                            media_info = "üéµ –ê—É–¥–∏–æ"
                        else:
                            media_info = "üìÅ –ú–µ–¥–∏–∞—Ñ–∞–π–ª"
                    text_content = msg.text or msg.caption or ""
                    if text_content:
                        preview_text += f"{text_content[:500]}{'...' if len(text_content) > 500 else ''}\n\n"
                    if media_info:
                        preview_text += f"–¢–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è: {media_info}"
                    else:
                        preview_text += "–¢–µ–∫—Å—Ç –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π"
                await callback_query.message.edit_text(
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n"
                    f"{preview_text}\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–î–ê, –ù–ê–ß–ê–¢–¨", callback_data="confirm_spam")],
                        [InlineKeyboardButton("–û–¢–ú–ï–ù–ê", callback_data="back")]
                    ])
                )
        except Exception as e:
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
                reply_markup=get_main_menu()
            )

    elif data == "confirm_spam":
        if is_spamming:
            return await callback_query.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        is_spamming = True
        sent_messages_count = 0
        await callback_query.message.edit_text(
            "–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="stop_spam")]
            ])
        )
        spam_task = asyncio.create_task(run_spam(_client, callback_query.message))

    elif data == "stop_spam":
        is_spamming = False
        if spam_task:
            spam_task.cancel()
        await callback_query.message.edit_text(
            "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=get_main_menu()
        )

    elif data == "stats":
        await callback_query.message.edit_text(
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_messages_count}",
            reply_markup=get_main_menu()
        )

    elif data == "back":
        await callback_query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )

async def rate_limit_check():
    while True:
        async with rate_limit_lock:
            now = time.monotonic()
            valid_timestamps = [t for t in message_timestamps if now - t < 60]
            message_timestamps[:] = valid_timestamps
            if len(valid_timestamps) < 10:
                message_timestamps.append(now)
                return
            else:
                sleep_time = 60 - (now - valid_timestamps[0])
        logger.info(f"–õ–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.2f} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(sleep_time)

async def log_to_channel(chat, action: str, retries=3):
    for attempt in range(retries):
        try:
            chat_title = getattr(chat, 'title', f"ID: {chat.id}")
            log_text = (
                f"**{action}**\n"
                f"–ß–∞—Ç: {chat_title}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            await app.send_message(LOG_CHANNEL_ID, log_text)
            break
        except Exception as e:
            if attempt == retries - 1:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥: {e}")
            await asyncio.sleep(5)

async def run_spam(_client: Client, message: Message):
    global sent_messages_count, is_spamming
    async with SpamClient(SPAM_SESSION, SPAM_API_ID, SPAM_API_HASH) as spam:
        saved_messages = await spam.get_messages("me", limit=1)
        if not saved_messages:
            await message.reply("–í –ò–∑–±—Ä–∞–Ω–Ω–æ–º –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!")
            return
        msg = saved_messages[0]
        dialogs = await get_cached_chats(spam)
        chats = [d for d in dialogs if d.is_group]

        async def send_message_to_chat(chat):
            global sent_messages_count
            try:
                await rate_limiter.acquire()
                await msg.forward_to(chat.id)
                sent_messages_count += 1
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat.id}")
                await log_to_channel(chat, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                while is_spamming:
                    await asyncio.sleep(5)
                    messages = await spam.get_messages(chat.id, limit=40)
                    new_messages = sum(1 for m in messages if not m.out)
                    if new_messages >= 40:
                        await rate_limit_check()
                        await msg.forward_to(chat.id)
                        sent_messages_count += 1
                        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ {chat.id}")
                        await log_to_channel(chat, "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
                    await asyncio.sleep(5)
            except FloodWaitError as e:
                logger.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –≤ —á–∞—Ç–µ {chat.id}: –∂–¥–µ–º {e.seconds} —Å–µ–∫.")
                await asyncio.sleep(e.seconds)
                await send_message_to_chat(chat)
            except Exception as e:
                error_str = str(e)
                if "USER_BANNED_IN_CHANNEL" in error_str or "The account has been banned" in error_str or "–Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –ø–∏—Å–∞—Ç—å" in error_str:
                    logger.error(f"–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ {chat.id}. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–≤—ã—Ö–æ–¥.")
                    try:
                        await spam.leave_chat(chat.id)
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ {chat.id}")
                    except Exception as ex:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞ {chat.id}: {str(ex)}")
                    return
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat.id}: {error_str}")
                    await handle_error(e, message)

        tasks = [asyncio.create_task(send_message_to_chat(chat)) for chat in chats]
        await asyncio.gather(*tasks)
    is_spamming = False

async def handle_error(error: Exception, message: Message):
    logger.error(str(error))
    error_msg = str(error)
    async def delete_message_later(msg: Message):
        await asyncio.sleep(300)
        try:
            await msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    try:
        if "A wait of" in error_msg:
            sent_msg = await message.reply("–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ —Ñ–ª—É–¥–∞!")
            asyncio.create_task(delete_message_later(sent_msg))
        elif "USER_BANNED_IN_CHANNEL" in error_msg:
            sent_msg = await message.reply("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω –≤ –æ–¥–Ω–æ–º –∏–∑ —á–∞—Ç–æ–≤!")
            asyncio.create_task(delete_message_later(sent_msg))
        elif "The account has been banned" in error_msg:
            sent_msg = await message.reply("–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–∞–Ω–µ–Ω –≤ Telegram!")
            asyncio.create_task(delete_message_later(sent_msg))
        else:
            sent_msg = await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}")
            asyncio.create_task(delete_message_later(sent_msg))
    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex}")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ù–æ–≤–æ–µ: –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    loop = asyncio.get_event_loop()
    loop.create_task(refresh_cache())

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    app.run()

    async def init_spam_client():
        async with SpamClient(SPAM_SESSION, SPAM_API_ID, SPAM_API_HASH) as _:
            print("–†–∞—Å—Å—ã–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")

    app.run()
    asyncio.run(init_spam_client())
